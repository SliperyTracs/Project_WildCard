import abc
<<<<<<< HEAD
<<<<<<< HEAD
from collections.abc import Iterable, Iterator, Mapping, MutableMapping
from typing import Generic, TypeAlias, TypeVar, overload
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
from typing import (
    Dict,
    Generic,
    Iterable,
    Iterator,
    List,
    Mapping,
    MutableMapping,
    Tuple,
    TypeVar,
    Union,
    overload,
)
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de

class istr(str): ...

upstr = istr

<<<<<<< HEAD
<<<<<<< HEAD
_S: TypeAlias = str | istr
=======
_S = Union[str, istr]
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
_S = Union[str, istr]
>>>>>>> c87786d2070907e606f902197f4f0139f56616de

_T = TypeVar("_T")

_T_co = TypeVar("_T_co", covariant=True)

_D = TypeVar("_D")

class MultiMapping(Mapping[_S, _T_co]):
    @overload
    @abc.abstractmethod
<<<<<<< HEAD
<<<<<<< HEAD
    def getall(self, key: _S) -> list[_T_co]: ...
    @overload
    @abc.abstractmethod
    def getall(self, key: _S, default: _D) -> list[_T_co] | _D: ...
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getall(self, key: _S) -> List[_T_co]: ...
    @overload
    @abc.abstractmethod
    def getall(self, key: _S, default: _D) -> Union[List[_T_co], _D]: ...
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    @overload
    @abc.abstractmethod
    def getone(self, key: _S) -> _T_co: ...
    @overload
    @abc.abstractmethod
<<<<<<< HEAD
<<<<<<< HEAD
    def getone(self, key: _S, default: _D) -> _T_co | _D: ...

_Arg: TypeAlias = (Mapping[str, _T] | Mapping[istr, _T] | dict[str, _T]
                   | dict[istr, _T] | MultiMapping[_T]
                   | Iterable[tuple[str, _T]] | Iterable[tuple[istr, _T]])
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getone(self, key: _S, default: _D) -> Union[_T_co, _D]: ...

_Arg = Union[Mapping[str, _T], Mapping[istr, _T],
             Dict[str, _T], Dict[istr, _T],
             MultiMapping[_T],
             Iterable[Tuple[str, _T]], Iterable[Tuple[istr, _T]]]
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de

class MutableMultiMapping(MultiMapping[_T], MutableMapping[_S, _T], Generic[_T]):
    @abc.abstractmethod
    def add(self, key: _S, value: _T) -> None: ...
    @abc.abstractmethod
    def extend(self, arg: _Arg[_T] = ..., **kwargs: _T) -> None: ...
    @overload
    @abc.abstractmethod
    def popone(self, key: _S) -> _T: ...
    @overload
    @abc.abstractmethod
<<<<<<< HEAD
<<<<<<< HEAD
    def popone(self, key: _S, default: _D) -> _T | _D: ...
    @overload
    @abc.abstractmethod
    def popall(self, key: _S) -> list[_T]: ...
    @overload
    @abc.abstractmethod
    def popall(self, key: _S, default: _D) -> list[_T] | _D: ...
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def popone(self, key: _S, default: _D) -> Union[_T, _D]: ...
    @overload
    @abc.abstractmethod
    def popall(self, key: _S) -> List[_T]: ...
    @overload
    @abc.abstractmethod
    def popall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de

class MultiDict(MutableMultiMapping[_T], Generic[_T]):
    def __init__(self, arg: _Arg[_T] = ..., **kwargs: _T) -> None: ...
    def copy(self) -> MultiDict[_T]: ...
    def __getitem__(self, k: _S) -> _T: ...
    def __setitem__(self, k: _S, v: _T) -> None: ...
    def __delitem__(self, v: _S) -> None: ...
    def __iter__(self) -> Iterator[_S]: ...
    def __len__(self) -> int: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def getall(self, key: _S) -> list[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> list[_T] | _D: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> _T | _D: ...
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getall(self, key: _S) -> List[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> Union[_T, _D]: ...
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def add(self, key: _S, value: _T) -> None: ...
    def extend(self, arg: _Arg[_T] = ..., **kwargs: _T) -> None: ...
    @overload
    def popone(self, key: _S) -> _T: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def popone(self, key: _S, default: _D) -> _T | _D: ...
    @overload
    def popall(self, key: _S) -> list[_T]: ...
    @overload
    def popall(self, key: _S, default: _D) -> list[_T] | _D: ...
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def popone(self, key: _S, default: _D) -> Union[_T, _D]: ...
    @overload
    def popall(self, key: _S) -> List[_T]: ...
    @overload
    def popall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de

class CIMultiDict(MutableMultiMapping[_T], Generic[_T]):
    def __init__(self, arg: _Arg[_T] = ..., **kwargs: _T) -> None: ...
    def copy(self) -> CIMultiDict[_T]: ...
    def __getitem__(self, k: _S) -> _T: ...
    def __setitem__(self, k: _S, v: _T) -> None: ...
    def __delitem__(self, v: _S) -> None: ...
    def __iter__(self) -> Iterator[_S]: ...
    def __len__(self) -> int: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def getall(self, key: _S) -> list[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> list[_T] | _D: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> _T | _D: ...
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getall(self, key: _S) -> List[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> Union[_T, _D]: ...
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def add(self, key: _S, value: _T) -> None: ...
    def extend(self, arg: _Arg[_T] = ..., **kwargs: _T) -> None: ...
    @overload
    def popone(self, key: _S) -> _T: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def popone(self, key: _S, default: _D) -> _T | _D: ...
    @overload
    def popall(self, key: _S) -> list[_T]: ...
    @overload
    def popall(self, key: _S, default: _D) -> list[_T] | _D: ...

class MultiDictProxy(MultiMapping[_T], Generic[_T]):
    def __init__(
        self, arg: MultiMapping[_T] | MutableMultiMapping[_T]
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def popone(self, key: _S, default: _D) -> Union[_T, _D]: ...
    @overload
    def popall(self, key: _S) -> List[_T]: ...
    @overload
    def popall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...

class MultiDictProxy(MultiMapping[_T], Generic[_T]):
    def __init__(
        self, arg: Union[MultiMapping[_T], MutableMultiMapping[_T]]
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    ) -> None: ...
    def copy(self) -> MultiDict[_T]: ...
    def __getitem__(self, k: _S) -> _T: ...
    def __iter__(self) -> Iterator[_S]: ...
    def __len__(self) -> int: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def getall(self, key: _S) -> list[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> list[_T] | _D: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> _T | _D: ...

class CIMultiDictProxy(MultiMapping[_T], Generic[_T]):
    def __init__(
        self, arg: MultiMapping[_T] | MutableMultiMapping[_T]
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getall(self, key: _S) -> List[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> Union[_T, _D]: ...

class CIMultiDictProxy(MultiMapping[_T], Generic[_T]):
    def __init__(
        self, arg: Union[MultiMapping[_T], MutableMultiMapping[_T]]
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    ) -> None: ...
    def __getitem__(self, k: _S) -> _T: ...
    def __iter__(self) -> Iterator[_S]: ...
    def __len__(self) -> int: ...
    @overload
<<<<<<< HEAD
<<<<<<< HEAD
    def getall(self, key: _S) -> list[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> list[_T] | _D: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> _T | _D: ...
    def copy(self) -> CIMultiDict[_T]: ...

def getversion(
    md: MultiDict[_T] | CIMultiDict[_T] | MultiDictProxy[_T] | CIMultiDictProxy[_T]
=======
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
    def getall(self, key: _S) -> List[_T]: ...
    @overload
    def getall(self, key: _S, default: _D) -> Union[List[_T], _D]: ...
    @overload
    def getone(self, key: _S) -> _T: ...
    @overload
    def getone(self, key: _S, default: _D) -> Union[_T, _D]: ...
    def copy(self) -> CIMultiDict[_T]: ...

def getversion(
    md: Union[MultiDict[_T], CIMultiDict[_T], MultiDictProxy[_T], CIMultiDictProxy[_T]]
<<<<<<< HEAD
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
=======
>>>>>>> c87786d2070907e606f902197f4f0139f56616de
) -> int: ...
